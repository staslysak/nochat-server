{"version":3,"sources":["theme.js","App.js","serviceWorker.js","index.js","utils/index.js","graphql/generated.tsx","client.js","components/Fallback/styles.js","components/Fallback/index.js"],"names":["preferColorSchema","window","matchMedia","matches","theme","createMuiTheme","palette","type","primary","secondary","props","sidebar","sidebarMin","classes","ellipsis","overflow","whiteSpace","textOverflow","lighten","darken","jss","create","plugins","jssTemplate","jssPreset","PrivateRoute","Component","component","rest","render","isAuthorized","to","privateRoutes","path","exact","lazy","publicRoutes","App","fallback","CssBaseline","map","route","key","Boolean","location","hostname","match","client","ThemeProvider","StylesProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","errorHandler","log","authTokens","get","selector","localStorage","getItem","accessToken","refreshToken","set","tokens","setItem","remove","removeItem","pasreQuery","qs","parse","search","arrayFormat","skipNull","parseNumbers","decode","exp","Date","now","err","sortByLastMessage","a","b","lastMessage","createdAt","diffTime","date","diff","moment","formatDate","format","renderDiffTimeLabel","renderTimeline","messages","timeline","length","forEach","idx","timeDiff","undefined","CacheControlScope","MessageFragmentFragmentDoc","gql","UserFragmentFragmentDoc","RegisterDocument","useRegisterMutation","baseOptions","ApolloReactHooks","LoginDocument","useLoginMutation","VerifyUserDocument","useVerifyUserMutation","LogoutDocument","useLogoutMutation","RefreshTokensDocument","CreateDirectDocument","useCreateDirectMutation","DeleteDirectDocument","useDeleteDirectMutation","DirectsDocument","useDirectsQuery","CurrentDirectDocument","useCurrentDirectQuery","DirectDeletedDocument","DirectCreatedDocument","CreateMessageDocument","useCreateMessageMutation","DeleteMessageDocument","useDeleteMessageMutation","ReadMessageDocument","useReadMessageMutation","GetMessagesDocument","useGetMessagesQuery","MessageCreatedDocument","MessageDeletedDocument","TypeMessageDocument","useTypeMessageMutation","UsersDocument","useUsersLazyQuery","CurrentUserDocument","useCurrentUserQuery","OnlineUserDocument","TypingUserDocument","refreshTokens","query","fetchPolicy","variables","data","httpLink","HttpLink","uri","process","wsLink","WebSocketLink","options","reconnect","connectionParams","authorization","connectionCallback","getRefreshedTokens","operation","forward","setContext","headers","subscriptionClient","tryReconnect","subscribe","next","directs","currentUser","currentDirect","authLink","ApolloLink","errorMiddleware","onError","graphQLErrors","networkError","extensions","code","httpLinkWithMiddleware","concat","from","link","split","definition","getMainDefinition","kind","ApolloClient","cache","InMemoryCache","useStyles","makeStyles","DirectFallback","height","display","justifyContent","alignItems","Loader","width","className","Typography","variant","CircularProgress","size","thickness","color"],"mappings":"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","file":"static/js/main.3d286cde.chunk.js","sourcesContent":["import { createMuiTheme, jssPreset } from \"@material-ui/core/styles\";\r\nimport { grey as primary, blue as secondary } from \"@material-ui/core/colors\";\r\nimport { lighten, darken } from \"@material-ui/core/styles/colorManipulator\";\r\nimport { create } from \"jss\";\r\nimport jssTemplate from \"jss-plugin-template\";\r\n\r\n// import defaultTheme from \"@material-ui/core/styles/defaultTheme\";\r\n\r\nconst preferColorSchema = window.matchMedia(\"(prefers-color-scheme: dark)\")\r\n  .matches;\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    type: preferColorSchema ? \"dark\" : \"light\",\r\n    primary,\r\n    secondary,\r\n  },\r\n  props: {\r\n    sidebar: 280,\r\n    sidebarMin: 150,\r\n    classes: {\r\n      ellipsis: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n        textOverflow: \"ellipsis\",\r\n      },\r\n    },\r\n  },\r\n  lighten,\r\n  darken,\r\n});\r\n\r\n// console.log(\"defaultTheme\", defaultTheme);\r\n// console.log(\"customTheme\", theme);\r\n\r\n// background:\r\n// theme.palette.type === \"dark\"\r\n//   ? theme.lighten(theme.palette.background.default, 0.235)\r\n//   : theme.darken(theme.palette.background.default, 0.057),\r\n\r\nexport const jss = create({\r\n  plugins: [jssTemplate(), ...jssPreset().plugins],\r\n});\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\nimport { isAuthorized } from \"utils/index\";\r\nimport {Loader} from 'components/Fallback'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      return isAuthorized() ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nconst privateRoutes = [\r\n  {\r\n    path: \"/me\",\r\n    exact: false,\r\n    component: lazy(() => import(\"./pages/Home\")),\r\n  },\r\n];\r\n\r\nconst publicRoutes = [\r\n  {\r\n    path: \"/(login|registration)\",\r\n    exact: true,\r\n    component: lazy(() => import(\"./pages/Login\")),\r\n  },\r\n  {\r\n    path: \"/verify\",\r\n    exact: true,\r\n    component: lazy(() => import(\"./pages/VerifyUser\")),\r\n  },\r\n];\r\n\r\nconst App = () => {\r\n  return (\r\n    <Suspense fallback={<Loader />}>\r\n      <CssBaseline />\r\n      <Router>\r\n        <Switch>\r\n          {privateRoutes.map((route) => (\r\n            <PrivateRoute key={route.path} {...route} />\r\n          ))}\r\n          {publicRoutes.map((route) => (\r\n            <Route key={route.path} {...route} />\r\n          ))}\r\n          <Route\r\n            path=\"*\"\r\n            render={() => <Redirect to={isAuthorized() ? \"/me\" : \"/login\"} />}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { client } from \"./client\";\r\nimport { ThemeProvider, StylesProvider } from \"@material-ui/core\";\r\nimport { theme, jss } from \"./theme\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nrender(\r\n  <ApolloProvider client={client}>\r\n    <ThemeProvider theme={theme}>\r\n      <StylesProvider jss={jss}>\r\n        <App />\r\n      </StylesProvider>\r\n    </ThemeProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import qs from \"query-string\";\r\nimport moment from \"moment\";\r\nimport decode from \"jwt-decode\";\r\n\r\nexport const errorHandler = (error) => {\r\n  console.log(error);\r\n};\r\n\r\nexport const stringifyQuery = (location, modifiers = {}) => {\r\n  const settings = {\r\n    arrayFormat: \"comma\",\r\n    skipNull: true,\r\n    parseNumbers: true,\r\n  };\r\n\r\n  let query = {\r\n    ...qs.parse(location.search, settings),\r\n    ...modifiers,\r\n  };\r\n\r\n  return {\r\n    ...location,\r\n    search: qs.stringify(query, settings),\r\n  };\r\n};\r\n\r\nexport const authTokens = {\r\n  get(selector) {\r\n    if (selector) {\r\n      return localStorage.getItem(selector);\r\n    }\r\n    return {\r\n      accessToken: localStorage.getItem(\"accessToken\"),\r\n      refreshToken: localStorage.getItem(\"refreshToken\"),\r\n    };\r\n  },\r\n  set(tokens) {\r\n    localStorage.setItem(\"accessToken\", tokens.accessToken);\r\n    localStorage.setItem(\"refreshToken\", tokens.refreshToken);\r\n  },\r\n  remove() {\r\n    localStorage.removeItem(\"accessToken\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n  },\r\n};\r\n\r\nexport const pasreQuery = (location) => {\r\n  const settings = {\r\n    arrayFormat: \"comma\",\r\n    skipNull: true,\r\n    parseNumbers: true,\r\n  };\r\n  return qs.parse(location.search, settings);\r\n};\r\n\r\nexport const isAuthorized = () => {\r\n  const { accessToken, refreshToken } = authTokens.get();\r\n  if (!accessToken || !refreshToken) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    decode(accessToken);\r\n    const { exp } = decode(refreshToken);\r\n    if (Date.now() / 1000 > exp) {\r\n      return false;\r\n    }\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const sortByLastMessage = (a, b) => {\r\n  return b.lastMessage.createdAt - a.lastMessage.createdAt;\r\n};\r\n\r\nexport const diffTime = (date, diff = \"days\") => {\r\n  return moment().diff(+date, diff);\r\n};\r\n\r\nexport const formatDate = (date, format = \"HH:mm\") => {\r\n  if (date) {\r\n    return moment(+date).format(format);\r\n  }\r\n};\r\n\r\nexport const renderDiffTimeLabel = (date) => {\r\n  const timeDiff = diffTime(+date);\r\n\r\n  switch (timeDiff) {\r\n    case 0:\r\n      return \"Today\";\r\n    case 1:\r\n      return \"Yesterday\";\r\n    default:\r\n      return formatDate(date, \"MMMM D\");\r\n  }\r\n};\r\n\r\nexport const renderTimeline = (messages) => {\r\n  const timeline = {};\r\n\r\n  if (messages.length) {\r\n    messages.forEach(({ createdAt }, idx) => {\r\n      const timeDiff = diffTime(createdAt, \"days\");\r\n      if (timeline[timeDiff] === undefined) {\r\n        timeline[timeDiff] = idx;\r\n      }\r\n    });\r\n  }\r\n\r\n  return timeline;\r\n};\r\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Direct = {\n   __typename?: 'Direct';\n  id: Scalars['Int'];\n  user?: Maybe<User>;\n  unread?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['String'];\n  lastMessage?: Maybe<Message>;\n};\n\nexport type CurrentDirect = {\n   __typename?: 'CurrentDirect';\n  direct?: Maybe<Direct>;\n  recipient?: Maybe<User>;\n};\n\nexport type Subscription = {\n   __typename?: 'Subscription';\n  directCreated?: Maybe<Direct>;\n  directDeleted: Direct;\n  messageCreated: Message;\n  messageDeleted: MessageDeleted;\n  typingUser: Scalars['String'];\n  onlineUser: User;\n};\n\n\nexport type SubscriptionMessageCreatedArgs = {\n  chatIds?: Maybe<Array<Maybe<Scalars['Int']>>>;\n};\n\n\nexport type SubscriptionMessageDeletedArgs = {\n  chatIds?: Maybe<Array<Maybe<Scalars['Int']>>>;\n};\n\n\nexport type SubscriptionTypingUserArgs = {\n  chatId: Scalars['Int'];\n};\n\nexport type Query = {\n   __typename?: 'Query';\n  directs?: Maybe<Array<Direct>>;\n  direct: Direct;\n  currentDirect?: Maybe<CurrentDirect>;\n  messages: Array<Message>;\n  currentUser: User;\n  users?: Maybe<Array<User>>;\n  onlineUsers?: Maybe<Array<User>>;\n  refreshTokens?: Maybe<TokensResponse>;\n};\n\n\nexport type QueryDirectArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryCurrentDirectArgs = {\n  userId: Scalars['Int'];\n};\n\n\nexport type QueryMessagesArgs = {\n  chatId: Scalars['Int'];\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryUsersArgs = {\n  username?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryRefreshTokensArgs = {\n  refreshToken: Scalars['String'];\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  createDirect: Direct;\n  deleteDirect: Scalars['Boolean'];\n  readMessage: Scalars['Int'];\n  deleteMessage: Scalars['Boolean'];\n  createMessage: Scalars['Boolean'];\n  typeMessage: Scalars['Boolean'];\n  logout?: Maybe<Scalars['Boolean']>;\n  verifyUser: LoginResponse;\n  login: LoginResponse;\n  register: Scalars['Boolean'];\n};\n\n\nexport type MutationCreateDirectArgs = {\n  userId: Scalars['Int'];\n  text?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationDeleteDirectArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationReadMessageArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeleteMessageArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateMessageArgs = {\n  chatId?: Maybe<Scalars['Int']>;\n  text: Scalars['String'];\n};\n\n\nexport type MutationTypeMessageArgs = {\n  chatId: Scalars['Int'];\n  username?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationVerifyUserArgs = {\n  secret: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Message = {\n   __typename?: 'Message';\n  id: Scalars['Int'];\n  userId: Scalars['Int'];\n  chatId: Scalars['Int'];\n  text: Scalars['String'];\n  unread: Scalars['Boolean'];\n  createdAt: Scalars['String'];\n};\n\nexport type MessageDeleted = {\n   __typename?: 'MessageDeleted';\n  ids?: Maybe<Scalars['Int']>;\n  chat?: Maybe<Direct>;\n};\n\nexport type User = {\n   __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  avatar: Scalars['String'];\n  status: Scalars['String'];\n  username: Scalars['String'];\n  createdAt: Scalars['String'];\n  online: Scalars['Boolean'];\n  lastSeen: Scalars['String'];\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse';\n  user?: Maybe<User>;\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type TokensResponse = {\n   __typename?: 'TokensResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type RegisterMutationVariables = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type LoginMutationVariables = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type VerifyUserMutationVariables = {\n  secret: Scalars['String'];\n};\n\n\nexport type VerifyUserMutation = (\n  { __typename?: 'Mutation' }\n  & { tokens: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RefreshTokensQueryVariables = {\n  refreshToken: Scalars['String'];\n};\n\n\nexport type RefreshTokensQuery = (\n  { __typename?: 'Query' }\n  & { tokens?: Maybe<(\n    { __typename?: 'TokensResponse' }\n    & Pick<TokensResponse, 'accessToken' | 'refreshToken'>\n  )> }\n);\n\nexport type CreateDirectMutationVariables = {\n  userId: Scalars['Int'];\n  text?: Maybe<Scalars['String']>;\n};\n\n\nexport type CreateDirectMutation = (\n  { __typename?: 'Mutation' }\n  & { createDirect: (\n    { __typename?: 'Direct' }\n    & Pick<Direct, 'id' | 'unread'>\n    & { user?: Maybe<(\n      { __typename?: 'User' }\n      & UserFragmentFragment\n    )>, lastMessage?: Maybe<(\n      { __typename?: 'Message' }\n      & MessageFragmentFragment\n    )> }\n  ) }\n);\n\nexport type DeleteDirectMutationVariables = {\n  id: Scalars['Int'];\n};\n\n\nexport type DeleteDirectMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteDirect'>\n);\n\nexport type DirectsQueryVariables = {};\n\n\nexport type DirectsQuery = (\n  { __typename?: 'Query' }\n  & { directs?: Maybe<Array<(\n    { __typename?: 'Direct' }\n    & Pick<Direct, 'id' | 'unread'>\n    & { user?: Maybe<(\n      { __typename?: 'User' }\n      & UserFragmentFragment\n    )>, lastMessage?: Maybe<(\n      { __typename?: 'Message' }\n      & MessageFragmentFragment\n    )> }\n  )>> }\n);\n\nexport type DirectQueryVariables = {\n  id: Scalars['Int'];\n};\n\n\nexport type DirectQuery = (\n  { __typename?: 'Query' }\n  & { direct: (\n    { __typename?: 'Direct' }\n    & Pick<Direct, 'id' | 'unread'>\n    & { user?: Maybe<(\n      { __typename?: 'User' }\n      & UserFragmentFragment\n    )>, lastMessage?: Maybe<(\n      { __typename?: 'Message' }\n      & MessageFragmentFragment\n    )> }\n  ) }\n);\n\nexport type CurrentDirectQueryVariables = {\n  userId: Scalars['Int'];\n};\n\n\nexport type CurrentDirectQuery = (\n  { __typename?: 'Query' }\n  & { currentDirect?: Maybe<(\n    { __typename?: 'CurrentDirect' }\n    & { direct?: Maybe<(\n      { __typename?: 'Direct' }\n      & Pick<Direct, 'id' | 'unread'>\n      & { user?: Maybe<(\n        { __typename?: 'User' }\n        & UserFragmentFragment\n      )>, lastMessage?: Maybe<(\n        { __typename?: 'Message' }\n        & MessageFragmentFragment\n      )> }\n    )>, recipient?: Maybe<(\n      { __typename?: 'User' }\n      & UserFragmentFragment\n    )> }\n  )> }\n);\n\nexport type DirectDeletedSubscriptionVariables = {};\n\n\nexport type DirectDeletedSubscription = (\n  { __typename?: 'Subscription' }\n  & { direct: (\n    { __typename?: 'Direct' }\n    & Pick<Direct, 'id'>\n  ) }\n);\n\nexport type DirectCreatedSubscriptionVariables = {};\n\n\nexport type DirectCreatedSubscription = (\n  { __typename?: 'Subscription' }\n  & { direct?: Maybe<(\n    { __typename?: 'Direct' }\n    & Pick<Direct, 'id' | 'unread'>\n    & { user?: Maybe<(\n      { __typename?: 'User' }\n      & UserFragmentFragment\n    )>, lastMessage?: Maybe<(\n      { __typename?: 'Message' }\n      & MessageFragmentFragment\n    )> }\n  )> }\n);\n\nexport type MessageFragmentFragment = (\n  { __typename?: 'Message' }\n  & Pick<Message, 'id' | 'text' | 'userId' | 'chatId' | 'unread' | 'createdAt'>\n);\n\nexport type UserFragmentFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'email' | 'avatar' | 'online' | 'username' | 'lastSeen' | 'createdAt'>\n);\n\nexport type CreateMessageMutationVariables = {\n  chatId?: Maybe<Scalars['Int']>;\n  text: Scalars['String'];\n};\n\n\nexport type CreateMessageMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createMessage'>\n);\n\nexport type DeleteMessageMutationVariables = {\n  id: Scalars['Int'];\n};\n\n\nexport type DeleteMessageMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteMessage'>\n);\n\nexport type ReadMessageMutationVariables = {\n  id: Scalars['Int'];\n};\n\n\nexport type ReadMessageMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'readMessage'>\n);\n\nexport type GetMessagesQueryVariables = {\n  chatId: Scalars['Int'];\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type GetMessagesQuery = (\n  { __typename?: 'Query' }\n  & { messages: Array<(\n    { __typename?: 'Message' }\n    & MessageFragmentFragment\n  )> }\n);\n\nexport type MessageCreatedSubscriptionVariables = {\n  chatIds?: Maybe<Array<Maybe<Scalars['Int']>>>;\n};\n\n\nexport type MessageCreatedSubscription = (\n  { __typename?: 'Subscription' }\n  & { messageCreated: (\n    { __typename?: 'Message' }\n    & MessageFragmentFragment\n  ) }\n);\n\nexport type MessageDeletedSubscriptionVariables = {\n  chatIds?: Maybe<Array<Maybe<Scalars['Int']>>>;\n};\n\n\nexport type MessageDeletedSubscription = (\n  { __typename?: 'Subscription' }\n  & { messageDeleted: (\n    { __typename?: 'MessageDeleted' }\n    & Pick<MessageDeleted, 'ids'>\n    & { chat?: Maybe<(\n      { __typename?: 'Direct' }\n      & Pick<Direct, 'id' | 'unread'>\n      & { lastMessage?: Maybe<(\n        { __typename?: 'Message' }\n        & MessageFragmentFragment\n      )>, user?: Maybe<(\n        { __typename?: 'User' }\n        & UserFragmentFragment\n      )> }\n    )> }\n  ) }\n);\n\nexport type TypeMessageMutationVariables = {\n  chatId: Scalars['Int'];\n  username?: Maybe<Scalars['String']>;\n};\n\n\nexport type TypeMessageMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'typeMessage'>\n);\n\nexport type UsersQueryVariables = {\n  username?: Maybe<Scalars['String']>;\n};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<(\n    { __typename?: 'User' }\n    & UserFragmentFragment\n  )>> }\n);\n\nexport type CurrentUserQueryVariables = {};\n\n\nexport type CurrentUserQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: (\n    { __typename?: 'User' }\n    & UserFragmentFragment\n  ) }\n);\n\nexport type OnlineUserSubscriptionVariables = {};\n\n\nexport type OnlineUserSubscription = (\n  { __typename?: 'Subscription' }\n  & { onlineUser: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'online' | 'lastSeen'>\n  ) }\n);\n\nexport type TypingUserSubscriptionVariables = {\n  chatId: Scalars['Int'];\n};\n\n\nexport type TypingUserSubscription = (\n  { __typename?: 'Subscription' }\n  & Pick<Subscription, 'typingUser'>\n);\n\nexport const MessageFragmentFragmentDoc = gql`\n    fragment messageFragment on Message {\n  id\n  text\n  userId\n  chatId\n  unread\n  createdAt\n}\n    `;\nexport const UserFragmentFragmentDoc = gql`\n    fragment userFragment on User {\n  id\n  email\n  avatar\n  online\n  username\n  lastSeen\n  createdAt\n}\n    `;\nexport const RegisterDocument = gql`\n    mutation register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\nexport type RegisterComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RegisterMutation, RegisterMutationVariables>, 'mutation'>;\n\n    export const RegisterComponent = (props: RegisterComponentProps) => (\n      <ApolloReactComponents.Mutation<RegisterMutation, RegisterMutationVariables> mutation={RegisterDocument} {...props} />\n    );\n    \n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const LoginDocument = gql`\n    mutation login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\nexport type LoginComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LoginMutation, LoginMutationVariables>, 'mutation'>;\n\n    export const LoginComponent = (props: LoginComponentProps) => (\n      <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables> mutation={LoginDocument} {...props} />\n    );\n    \n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const VerifyUserDocument = gql`\n    mutation verifyUser($secret: String!) {\n  tokens: verifyUser(secret: $secret) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type VerifyUserMutationFn = ApolloReactCommon.MutationFunction<VerifyUserMutation, VerifyUserMutationVariables>;\nexport type VerifyUserComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<VerifyUserMutation, VerifyUserMutationVariables>, 'mutation'>;\n\n    export const VerifyUserComponent = (props: VerifyUserComponentProps) => (\n      <ApolloReactComponents.Mutation<VerifyUserMutation, VerifyUserMutationVariables> mutation={VerifyUserDocument} {...props} />\n    );\n    \n\n/**\n * __useVerifyUserMutation__\n *\n * To run a mutation, you first call `useVerifyUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVerifyUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [verifyUserMutation, { data, loading, error }] = useVerifyUserMutation({\n *   variables: {\n *      secret: // value for 'secret'\n *   },\n * });\n */\nexport function useVerifyUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<VerifyUserMutation, VerifyUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<VerifyUserMutation, VerifyUserMutationVariables>(VerifyUserDocument, baseOptions);\n      }\nexport type VerifyUserMutationHookResult = ReturnType<typeof useVerifyUserMutation>;\nexport type VerifyUserMutationResult = ApolloReactCommon.MutationResult<VerifyUserMutation>;\nexport type VerifyUserMutationOptions = ApolloReactCommon.BaseMutationOptions<VerifyUserMutation, VerifyUserMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\nexport type LogoutComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LogoutMutation, LogoutMutationVariables>, 'mutation'>;\n\n    export const LogoutComponent = (props: LogoutComponentProps) => (\n      <ApolloReactComponents.Mutation<LogoutMutation, LogoutMutationVariables> mutation={LogoutDocument} {...props} />\n    );\n    \n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RefreshTokensDocument = gql`\n    query refreshTokens($refreshToken: String!) {\n  tokens: refreshTokens(refreshToken: $refreshToken) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type RefreshTokensComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<RefreshTokensQuery, RefreshTokensQueryVariables>, 'query'> & ({ variables: RefreshTokensQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const RefreshTokensComponent = (props: RefreshTokensComponentProps) => (\n      <ApolloReactComponents.Query<RefreshTokensQuery, RefreshTokensQueryVariables> query={RefreshTokensDocument} {...props} />\n    );\n    \n\n/**\n * __useRefreshTokensQuery__\n *\n * To run a query within a React component, call `useRefreshTokensQuery` and pass it any options that fit your needs.\n * When your component renders, `useRefreshTokensQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRefreshTokensQuery({\n *   variables: {\n *      refreshToken: // value for 'refreshToken'\n *   },\n * });\n */\nexport function useRefreshTokensQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RefreshTokensQuery, RefreshTokensQueryVariables>) {\n        return ApolloReactHooks.useQuery<RefreshTokensQuery, RefreshTokensQueryVariables>(RefreshTokensDocument, baseOptions);\n      }\nexport function useRefreshTokensLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RefreshTokensQuery, RefreshTokensQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<RefreshTokensQuery, RefreshTokensQueryVariables>(RefreshTokensDocument, baseOptions);\n        }\nexport type RefreshTokensQueryHookResult = ReturnType<typeof useRefreshTokensQuery>;\nexport type RefreshTokensLazyQueryHookResult = ReturnType<typeof useRefreshTokensLazyQuery>;\nexport type RefreshTokensQueryResult = ApolloReactCommon.QueryResult<RefreshTokensQuery, RefreshTokensQueryVariables>;\nexport const CreateDirectDocument = gql`\n    mutation createDirect($userId: Int!, $text: String) {\n  createDirect(userId: $userId, text: $text) {\n    id\n    user {\n      ...userFragment\n    }\n    lastMessage {\n      ...messageFragment\n    }\n    unread\n  }\n}\n    ${UserFragmentFragmentDoc}\n${MessageFragmentFragmentDoc}`;\nexport type CreateDirectMutationFn = ApolloReactCommon.MutationFunction<CreateDirectMutation, CreateDirectMutationVariables>;\nexport type CreateDirectComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateDirectMutation, CreateDirectMutationVariables>, 'mutation'>;\n\n    export const CreateDirectComponent = (props: CreateDirectComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateDirectMutation, CreateDirectMutationVariables> mutation={CreateDirectDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateDirectMutation__\n *\n * To run a mutation, you first call `useCreateDirectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateDirectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createDirectMutation, { data, loading, error }] = useCreateDirectMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateDirectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateDirectMutation, CreateDirectMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateDirectMutation, CreateDirectMutationVariables>(CreateDirectDocument, baseOptions);\n      }\nexport type CreateDirectMutationHookResult = ReturnType<typeof useCreateDirectMutation>;\nexport type CreateDirectMutationResult = ApolloReactCommon.MutationResult<CreateDirectMutation>;\nexport type CreateDirectMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateDirectMutation, CreateDirectMutationVariables>;\nexport const DeleteDirectDocument = gql`\n    mutation deleteDirect($id: Int!) {\n  deleteDirect(id: $id)\n}\n    `;\nexport type DeleteDirectMutationFn = ApolloReactCommon.MutationFunction<DeleteDirectMutation, DeleteDirectMutationVariables>;\nexport type DeleteDirectComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteDirectMutation, DeleteDirectMutationVariables>, 'mutation'>;\n\n    export const DeleteDirectComponent = (props: DeleteDirectComponentProps) => (\n      <ApolloReactComponents.Mutation<DeleteDirectMutation, DeleteDirectMutationVariables> mutation={DeleteDirectDocument} {...props} />\n    );\n    \n\n/**\n * __useDeleteDirectMutation__\n *\n * To run a mutation, you first call `useDeleteDirectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteDirectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteDirectMutation, { data, loading, error }] = useDeleteDirectMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteDirectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteDirectMutation, DeleteDirectMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteDirectMutation, DeleteDirectMutationVariables>(DeleteDirectDocument, baseOptions);\n      }\nexport type DeleteDirectMutationHookResult = ReturnType<typeof useDeleteDirectMutation>;\nexport type DeleteDirectMutationResult = ApolloReactCommon.MutationResult<DeleteDirectMutation>;\nexport type DeleteDirectMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteDirectMutation, DeleteDirectMutationVariables>;\nexport const DirectsDocument = gql`\n    query directs {\n  directs {\n    id\n    user {\n      ...userFragment\n    }\n    lastMessage {\n      ...messageFragment\n    }\n    unread\n  }\n}\n    ${UserFragmentFragmentDoc}\n${MessageFragmentFragmentDoc}`;\nexport type DirectsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<DirectsQuery, DirectsQueryVariables>, 'query'>;\n\n    export const DirectsComponent = (props: DirectsComponentProps) => (\n      <ApolloReactComponents.Query<DirectsQuery, DirectsQueryVariables> query={DirectsDocument} {...props} />\n    );\n    \n\n/**\n * __useDirectsQuery__\n *\n * To run a query within a React component, call `useDirectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useDirectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DirectsQuery, DirectsQueryVariables>) {\n        return ApolloReactHooks.useQuery<DirectsQuery, DirectsQueryVariables>(DirectsDocument, baseOptions);\n      }\nexport function useDirectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DirectsQuery, DirectsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<DirectsQuery, DirectsQueryVariables>(DirectsDocument, baseOptions);\n        }\nexport type DirectsQueryHookResult = ReturnType<typeof useDirectsQuery>;\nexport type DirectsLazyQueryHookResult = ReturnType<typeof useDirectsLazyQuery>;\nexport type DirectsQueryResult = ApolloReactCommon.QueryResult<DirectsQuery, DirectsQueryVariables>;\nexport const DirectDocument = gql`\n    query direct($id: Int!) {\n  direct(id: $id) {\n    id\n    user {\n      ...userFragment\n    }\n    lastMessage {\n      ...messageFragment\n    }\n    unread\n  }\n}\n    ${UserFragmentFragmentDoc}\n${MessageFragmentFragmentDoc}`;\nexport type DirectComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<DirectQuery, DirectQueryVariables>, 'query'> & ({ variables: DirectQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const DirectComponent = (props: DirectComponentProps) => (\n      <ApolloReactComponents.Query<DirectQuery, DirectQueryVariables> query={DirectDocument} {...props} />\n    );\n    \n\n/**\n * __useDirectQuery__\n *\n * To run a query within a React component, call `useDirectQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDirectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DirectQuery, DirectQueryVariables>) {\n        return ApolloReactHooks.useQuery<DirectQuery, DirectQueryVariables>(DirectDocument, baseOptions);\n      }\nexport function useDirectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DirectQuery, DirectQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<DirectQuery, DirectQueryVariables>(DirectDocument, baseOptions);\n        }\nexport type DirectQueryHookResult = ReturnType<typeof useDirectQuery>;\nexport type DirectLazyQueryHookResult = ReturnType<typeof useDirectLazyQuery>;\nexport type DirectQueryResult = ApolloReactCommon.QueryResult<DirectQuery, DirectQueryVariables>;\nexport const CurrentDirectDocument = gql`\n    query currentDirect($userId: Int!) {\n  currentDirect(userId: $userId) {\n    direct {\n      id\n      user {\n        ...userFragment\n      }\n      lastMessage {\n        ...messageFragment\n      }\n      unread\n    }\n    recipient {\n      ...userFragment\n    }\n  }\n}\n    ${UserFragmentFragmentDoc}\n${MessageFragmentFragmentDoc}`;\nexport type CurrentDirectComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CurrentDirectQuery, CurrentDirectQueryVariables>, 'query'> & ({ variables: CurrentDirectQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const CurrentDirectComponent = (props: CurrentDirectComponentProps) => (\n      <ApolloReactComponents.Query<CurrentDirectQuery, CurrentDirectQueryVariables> query={CurrentDirectDocument} {...props} />\n    );\n    \n\n/**\n * __useCurrentDirectQuery__\n *\n * To run a query within a React component, call `useCurrentDirectQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrentDirectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrentDirectQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useCurrentDirectQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrentDirectQuery, CurrentDirectQueryVariables>) {\n        return ApolloReactHooks.useQuery<CurrentDirectQuery, CurrentDirectQueryVariables>(CurrentDirectDocument, baseOptions);\n      }\nexport function useCurrentDirectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrentDirectQuery, CurrentDirectQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CurrentDirectQuery, CurrentDirectQueryVariables>(CurrentDirectDocument, baseOptions);\n        }\nexport type CurrentDirectQueryHookResult = ReturnType<typeof useCurrentDirectQuery>;\nexport type CurrentDirectLazyQueryHookResult = ReturnType<typeof useCurrentDirectLazyQuery>;\nexport type CurrentDirectQueryResult = ApolloReactCommon.QueryResult<CurrentDirectQuery, CurrentDirectQueryVariables>;\nexport const DirectDeletedDocument = gql`\n    subscription directDeleted {\n  direct: directDeleted {\n    id\n  }\n}\n    `;\nexport type DirectDeletedComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<DirectDeletedSubscription, DirectDeletedSubscriptionVariables>, 'subscription'>;\n\n    export const DirectDeletedComponent = (props: DirectDeletedComponentProps) => (\n      <ApolloReactComponents.Subscription<DirectDeletedSubscription, DirectDeletedSubscriptionVariables> subscription={DirectDeletedDocument} {...props} />\n    );\n    \n\n/**\n * __useDirectDeletedSubscription__\n *\n * To run a query within a React component, call `useDirectDeletedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useDirectDeletedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectDeletedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useDirectDeletedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<DirectDeletedSubscription, DirectDeletedSubscriptionVariables>) {\n        return ApolloReactHooks.useSubscription<DirectDeletedSubscription, DirectDeletedSubscriptionVariables>(DirectDeletedDocument, baseOptions);\n      }\nexport type DirectDeletedSubscriptionHookResult = ReturnType<typeof useDirectDeletedSubscription>;\nexport type DirectDeletedSubscriptionResult = ApolloReactCommon.SubscriptionResult<DirectDeletedSubscription>;\nexport const DirectCreatedDocument = gql`\n    subscription directCreated {\n  direct: directCreated {\n    id\n    user {\n      ...userFragment\n    }\n    lastMessage {\n      ...messageFragment\n    }\n    unread\n  }\n}\n    ${UserFragmentFragmentDoc}\n${MessageFragmentFragmentDoc}`;\nexport type DirectCreatedComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<DirectCreatedSubscription, DirectCreatedSubscriptionVariables>, 'subscription'>;\n\n    export const DirectCreatedComponent = (props: DirectCreatedComponentProps) => (\n      <ApolloReactComponents.Subscription<DirectCreatedSubscription, DirectCreatedSubscriptionVariables> subscription={DirectCreatedDocument} {...props} />\n    );\n    \n\n/**\n * __useDirectCreatedSubscription__\n *\n * To run a query within a React component, call `useDirectCreatedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useDirectCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectCreatedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useDirectCreatedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<DirectCreatedSubscription, DirectCreatedSubscriptionVariables>) {\n        return ApolloReactHooks.useSubscription<DirectCreatedSubscription, DirectCreatedSubscriptionVariables>(DirectCreatedDocument, baseOptions);\n      }\nexport type DirectCreatedSubscriptionHookResult = ReturnType<typeof useDirectCreatedSubscription>;\nexport type DirectCreatedSubscriptionResult = ApolloReactCommon.SubscriptionResult<DirectCreatedSubscription>;\nexport const CreateMessageDocument = gql`\n    mutation createMessage($chatId: Int, $text: String!) {\n  createMessage(chatId: $chatId, text: $text)\n}\n    `;\nexport type CreateMessageMutationFn = ApolloReactCommon.MutationFunction<CreateMessageMutation, CreateMessageMutationVariables>;\nexport type CreateMessageComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateMessageMutation, CreateMessageMutationVariables>, 'mutation'>;\n\n    export const CreateMessageComponent = (props: CreateMessageComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateMessageMutation, CreateMessageMutationVariables> mutation={CreateMessageDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      chatId: // value for 'chatId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateMessageMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateMessageMutation, CreateMessageMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateMessageMutation, CreateMessageMutationVariables>(CreateMessageDocument, baseOptions);\n      }\nexport type CreateMessageMutationHookResult = ReturnType<typeof useCreateMessageMutation>;\nexport type CreateMessageMutationResult = ApolloReactCommon.MutationResult<CreateMessageMutation>;\nexport type CreateMessageMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateMessageMutation, CreateMessageMutationVariables>;\nexport const DeleteMessageDocument = gql`\n    mutation deleteMessage($id: Int!) {\n  deleteMessage(id: $id)\n}\n    `;\nexport type DeleteMessageMutationFn = ApolloReactCommon.MutationFunction<DeleteMessageMutation, DeleteMessageMutationVariables>;\nexport type DeleteMessageComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteMessageMutation, DeleteMessageMutationVariables>, 'mutation'>;\n\n    export const DeleteMessageComponent = (props: DeleteMessageComponentProps) => (\n      <ApolloReactComponents.Mutation<DeleteMessageMutation, DeleteMessageMutationVariables> mutation={DeleteMessageDocument} {...props} />\n    );\n    \n\n/**\n * __useDeleteMessageMutation__\n *\n * To run a mutation, you first call `useDeleteMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMessageMutation, { data, loading, error }] = useDeleteMessageMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteMessageMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteMessageMutation, DeleteMessageMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteMessageMutation, DeleteMessageMutationVariables>(DeleteMessageDocument, baseOptions);\n      }\nexport type DeleteMessageMutationHookResult = ReturnType<typeof useDeleteMessageMutation>;\nexport type DeleteMessageMutationResult = ApolloReactCommon.MutationResult<DeleteMessageMutation>;\nexport type DeleteMessageMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteMessageMutation, DeleteMessageMutationVariables>;\nexport const ReadMessageDocument = gql`\n    mutation readMessage($id: Int!) {\n  readMessage(id: $id)\n}\n    `;\nexport type ReadMessageMutationFn = ApolloReactCommon.MutationFunction<ReadMessageMutation, ReadMessageMutationVariables>;\nexport type ReadMessageComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ReadMessageMutation, ReadMessageMutationVariables>, 'mutation'>;\n\n    export const ReadMessageComponent = (props: ReadMessageComponentProps) => (\n      <ApolloReactComponents.Mutation<ReadMessageMutation, ReadMessageMutationVariables> mutation={ReadMessageDocument} {...props} />\n    );\n    \n\n/**\n * __useReadMessageMutation__\n *\n * To run a mutation, you first call `useReadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [readMessageMutation, { data, loading, error }] = useReadMessageMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useReadMessageMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReadMessageMutation, ReadMessageMutationVariables>) {\n        return ApolloReactHooks.useMutation<ReadMessageMutation, ReadMessageMutationVariables>(ReadMessageDocument, baseOptions);\n      }\nexport type ReadMessageMutationHookResult = ReturnType<typeof useReadMessageMutation>;\nexport type ReadMessageMutationResult = ApolloReactCommon.MutationResult<ReadMessageMutation>;\nexport type ReadMessageMutationOptions = ApolloReactCommon.BaseMutationOptions<ReadMessageMutation, ReadMessageMutationVariables>;\nexport const GetMessagesDocument = gql`\n    query getMessages($chatId: Int!, $offset: Int) {\n  messages(chatId: $chatId, offset: $offset) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentFragmentDoc}`;\nexport type GetMessagesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetMessagesQuery, GetMessagesQueryVariables>, 'query'> & ({ variables: GetMessagesQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetMessagesComponent = (props: GetMessagesComponentProps) => (\n      <ApolloReactComponents.Query<GetMessagesQuery, GetMessagesQueryVariables> query={GetMessagesDocument} {...props} />\n    );\n    \n\n/**\n * __useGetMessagesQuery__\n *\n * To run a query within a React component, call `useGetMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesQuery({\n *   variables: {\n *      chatId: // value for 'chatId'\n *      offset: // value for 'offset'\n *   },\n * });\n */\nexport function useGetMessagesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n      }\nexport function useGetMessagesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n        }\nexport type GetMessagesQueryHookResult = ReturnType<typeof useGetMessagesQuery>;\nexport type GetMessagesLazyQueryHookResult = ReturnType<typeof useGetMessagesLazyQuery>;\nexport type GetMessagesQueryResult = ApolloReactCommon.QueryResult<GetMessagesQuery, GetMessagesQueryVariables>;\nexport const MessageCreatedDocument = gql`\n    subscription messageCreated($chatIds: [Int]) {\n  messageCreated(chatIds: $chatIds) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentFragmentDoc}`;\nexport type MessageCreatedComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<MessageCreatedSubscription, MessageCreatedSubscriptionVariables>, 'subscription'>;\n\n    export const MessageCreatedComponent = (props: MessageCreatedComponentProps) => (\n      <ApolloReactComponents.Subscription<MessageCreatedSubscription, MessageCreatedSubscriptionVariables> subscription={MessageCreatedDocument} {...props} />\n    );\n    \n\n/**\n * __useMessageCreatedSubscription__\n *\n * To run a query within a React component, call `useMessageCreatedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useMessageCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessageCreatedSubscription({\n *   variables: {\n *      chatIds: // value for 'chatIds'\n *   },\n * });\n */\nexport function useMessageCreatedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<MessageCreatedSubscription, MessageCreatedSubscriptionVariables>) {\n        return ApolloReactHooks.useSubscription<MessageCreatedSubscription, MessageCreatedSubscriptionVariables>(MessageCreatedDocument, baseOptions);\n      }\nexport type MessageCreatedSubscriptionHookResult = ReturnType<typeof useMessageCreatedSubscription>;\nexport type MessageCreatedSubscriptionResult = ApolloReactCommon.SubscriptionResult<MessageCreatedSubscription>;\nexport const MessageDeletedDocument = gql`\n    subscription messageDeleted($chatIds: [Int]) {\n  messageDeleted(chatIds: $chatIds) {\n    ids\n    chat {\n      id\n      lastMessage {\n        ...messageFragment\n      }\n      user {\n        ...userFragment\n      }\n      unread\n    }\n  }\n}\n    ${MessageFragmentFragmentDoc}\n${UserFragmentFragmentDoc}`;\nexport type MessageDeletedComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<MessageDeletedSubscription, MessageDeletedSubscriptionVariables>, 'subscription'>;\n\n    export const MessageDeletedComponent = (props: MessageDeletedComponentProps) => (\n      <ApolloReactComponents.Subscription<MessageDeletedSubscription, MessageDeletedSubscriptionVariables> subscription={MessageDeletedDocument} {...props} />\n    );\n    \n\n/**\n * __useMessageDeletedSubscription__\n *\n * To run a query within a React component, call `useMessageDeletedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useMessageDeletedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessageDeletedSubscription({\n *   variables: {\n *      chatIds: // value for 'chatIds'\n *   },\n * });\n */\nexport function useMessageDeletedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<MessageDeletedSubscription, MessageDeletedSubscriptionVariables>) {\n        return ApolloReactHooks.useSubscription<MessageDeletedSubscription, MessageDeletedSubscriptionVariables>(MessageDeletedDocument, baseOptions);\n      }\nexport type MessageDeletedSubscriptionHookResult = ReturnType<typeof useMessageDeletedSubscription>;\nexport type MessageDeletedSubscriptionResult = ApolloReactCommon.SubscriptionResult<MessageDeletedSubscription>;\nexport const TypeMessageDocument = gql`\n    mutation typeMessage($chatId: Int!, $username: String) {\n  typeMessage(chatId: $chatId, username: $username)\n}\n    `;\nexport type TypeMessageMutationFn = ApolloReactCommon.MutationFunction<TypeMessageMutation, TypeMessageMutationVariables>;\nexport type TypeMessageComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<TypeMessageMutation, TypeMessageMutationVariables>, 'mutation'>;\n\n    export const TypeMessageComponent = (props: TypeMessageComponentProps) => (\n      <ApolloReactComponents.Mutation<TypeMessageMutation, TypeMessageMutationVariables> mutation={TypeMessageDocument} {...props} />\n    );\n    \n\n/**\n * __useTypeMessageMutation__\n *\n * To run a mutation, you first call `useTypeMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useTypeMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [typeMessageMutation, { data, loading, error }] = useTypeMessageMutation({\n *   variables: {\n *      chatId: // value for 'chatId'\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useTypeMessageMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TypeMessageMutation, TypeMessageMutationVariables>) {\n        return ApolloReactHooks.useMutation<TypeMessageMutation, TypeMessageMutationVariables>(TypeMessageDocument, baseOptions);\n      }\nexport type TypeMessageMutationHookResult = ReturnType<typeof useTypeMessageMutation>;\nexport type TypeMessageMutationResult = ApolloReactCommon.MutationResult<TypeMessageMutation>;\nexport type TypeMessageMutationOptions = ApolloReactCommon.BaseMutationOptions<TypeMessageMutation, TypeMessageMutationVariables>;\nexport const UsersDocument = gql`\n    query users($username: String) {\n  users(username: $username) {\n    ...userFragment\n  }\n}\n    ${UserFragmentFragmentDoc}`;\nexport type UsersComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<UsersQuery, UsersQueryVariables>, 'query'>;\n\n    export const UsersComponent = (props: UsersComponentProps) => (\n      <ApolloReactComponents.Query<UsersQuery, UsersQueryVariables> query={UsersDocument} {...props} />\n    );\n    \n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;\nexport const CurrentUserDocument = gql`\n    query currentUser {\n  currentUser {\n    ...userFragment\n  }\n}\n    ${UserFragmentFragmentDoc}`;\nexport type CurrentUserComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CurrentUserQuery, CurrentUserQueryVariables>, 'query'>;\n\n    export const CurrentUserComponent = (props: CurrentUserComponentProps) => (\n      <ApolloReactComponents.Query<CurrentUserQuery, CurrentUserQueryVariables> query={CurrentUserDocument} {...props} />\n    );\n    \n\n/**\n * __useCurrentUserQuery__\n *\n * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrentUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCurrentUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, baseOptions);\n      }\nexport function useCurrentUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, baseOptions);\n        }\nexport type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;\nexport type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;\nexport type CurrentUserQueryResult = ApolloReactCommon.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;\nexport const OnlineUserDocument = gql`\n    subscription onlineUser {\n  onlineUser {\n    id\n    online\n    lastSeen\n  }\n}\n    `;\nexport type OnlineUserComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<OnlineUserSubscription, OnlineUserSubscriptionVariables>, 'subscription'>;\n\n    export const OnlineUserComponent = (props: OnlineUserComponentProps) => (\n      <ApolloReactComponents.Subscription<OnlineUserSubscription, OnlineUserSubscriptionVariables> subscription={OnlineUserDocument} {...props} />\n    );\n    \n\n/**\n * __useOnlineUserSubscription__\n *\n * To run a query within a React component, call `useOnlineUserSubscription` and pass it any options that fit your needs.\n * When your component renders, `useOnlineUserSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOnlineUserSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useOnlineUserSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<OnlineUserSubscription, OnlineUserSubscriptionVariables>) {\n        return ApolloReactHooks.useSubscription<OnlineUserSubscription, OnlineUserSubscriptionVariables>(OnlineUserDocument, baseOptions);\n      }\nexport type OnlineUserSubscriptionHookResult = ReturnType<typeof useOnlineUserSubscription>;\nexport type OnlineUserSubscriptionResult = ApolloReactCommon.SubscriptionResult<OnlineUserSubscription>;\nexport const TypingUserDocument = gql`\n    subscription typingUser($chatId: Int!) {\n  typingUser(chatId: $chatId)\n}\n    `;\nexport type TypingUserComponentProps = Omit<ApolloReactComponents.SubscriptionComponentOptions<TypingUserSubscription, TypingUserSubscriptionVariables>, 'subscription'>;\n\n    export const TypingUserComponent = (props: TypingUserComponentProps) => (\n      <ApolloReactComponents.Subscription<TypingUserSubscription, TypingUserSubscriptionVariables> subscription={TypingUserDocument} {...props} />\n    );\n    \n\n/**\n * __useTypingUserSubscription__\n *\n * To run a query within a React component, call `useTypingUserSubscription` and pass it any options that fit your needs.\n * When your component renders, `useTypingUserSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTypingUserSubscription({\n *   variables: {\n *      chatId: // value for 'chatId'\n *   },\n * });\n */\nexport function useTypingUserSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<TypingUserSubscription, TypingUserSubscriptionVariables>) {\n        return ApolloReactHooks.useSubscription<TypingUserSubscription, TypingUserSubscriptionVariables>(TypingUserDocument, baseOptions);\n      }\nexport type TypingUserSubscriptionHookResult = ReturnType<typeof useTypingUserSubscription>;\nexport type TypingUserSubscriptionResult = ApolloReactCommon.SubscriptionResult<TypingUserSubscription>;","import { ApolloClient } from \"apollo-client\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloLink, split } from \"apollo-link\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { onError } from \"apollo-link-error\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport { authTokens } from \"utils/index\";\r\nimport { RefreshTokensDocument } from \"graphql/generated.tsx\";\r\n\r\nconst refreshTokens = async () =>\r\n  await client\r\n    .query({\r\n      query: RefreshTokensDocument,\r\n      fetchPolicy: \"no-cache\",\r\n      variables: { refreshToken: authTokens.get(\"refreshToken\") },\r\n    })\r\n    .then(({ data }) => {\r\n      authTokens.set(data.tokens);\r\n      return data.tokens;\r\n    });\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: `${process.env.REACT_APP_API_URI}/graphql`,\r\n});\r\n\r\nexport const wsLink = new WebSocketLink({\r\n  uri: `${process.env.REACT_APP_SOCKET_URI}/graphql`,\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams: () => ({\r\n      authorization: authTokens.get(\"accessToken\"),\r\n    }),\r\n    connectionCallback() {\r\n      console.log(\"CONNECTION_TOKEN\", authTokens.get(\"accessToken\"));\r\n    },\r\n  },\r\n});\r\n\r\nexport const getRefreshedTokens = async (operation, forward) => {\r\n  await refreshTokens().then(({ accessToken }) => {\r\n    console.log(\"ACCESS_TOKEN\", accessToken);\r\n    operation.setContext(({ headers = {} }) => ({\r\n      headers: {\r\n        ...headers,\r\n        authorization: accessToken,\r\n      },\r\n    }));\r\n\r\n    wsLink.subscriptionClient.tryReconnect();\r\n\r\n    forward(operation).subscribe({\r\n      next: ({ data }) => {\r\n        const { query, variables } = operation;\r\n        if (data?.directs) client.query({ query, variables, data });\r\n        if (data?.currentUser) client.query({ query, variables, data });\r\n        if (data?.currentDirect) client.query({ query, variables, data });\r\n      },\r\n    });\r\n  });\r\n};\r\n\r\nconst authLink = new ApolloLink((operation, forward) => {\r\n  operation.setContext(({ headers }) => ({\r\n    headers: {\r\n      ...headers,\r\n      authorization: authTokens.get(\"accessToken\"),\r\n    },\r\n  }));\r\n\r\n  return forward(operation);\r\n});\r\n\r\nconst errorMiddleware = onError(\r\n  ({ graphQLErrors, networkError, operation, forward }) => {\r\n    if (graphQLErrors) {\r\n      graphQLErrors.map(async ({ message, path, extensions }) => {\r\n        if (extensions.code === \"UNAUTHENTICATED\") {\r\n          getRefreshedTokens(operation, forward);\r\n        }\r\n\r\n        if (extensions.code === \"INTERNAL_SERVER_ERROR\") {\r\n          authTokens.remove();\r\n        }\r\n\r\n        console.log(\r\n          `[GraphQL ERROR]:\r\n          CODE: ${extensions.code},\r\n          Message: ${message},\r\n          Path: ${path}\r\n      `\r\n        );\r\n      });\r\n    }\r\n\r\n    if (networkError) {\r\n      console.log(`[Network error]: ${networkError}`);\r\n    }\r\n  }\r\n);\r\n\r\nconst httpLinkWithMiddleware = authLink.concat(\r\n  ApolloLink.from([errorMiddleware, httpLink])\r\n);\r\n\r\nconst link = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLinkWithMiddleware\r\n);\r\n\r\nexport const client = new ApolloClient({\r\n  link,\r\n  cache: new InMemoryCache(),\r\n});\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n  DirectFallback: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  Loader: {\r\n    height: '100vh',\r\n    width: '100vw',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  }\r\n}));\r\n","import React from \"react\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport const DirectFallback = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.DirectFallback}>\r\n      <Typography variant=\"body2\">No messages here yet...</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Loader = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.Loader}>\r\n      <CircularProgress\r\n        size={120}\r\n        thickness={2}\r\n        color='secondary'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}