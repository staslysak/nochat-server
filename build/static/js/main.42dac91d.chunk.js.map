{"version":3,"sources":["theme.js","App.js","serviceWorker.js","index.js","utils/index.js","client.js"],"names":["preferColorSchema","window","matchMedia","matches","theme","createMuiTheme","palette","type","primary","secondary","props","sidebar","sidebarMin","classes","ellipsis","overflow","whiteSpace","textOverflow","lighten","darken","createLoadableComponent","pathResolver","Loadable","loader","loading","error","console","PrivateRoute","Component","component","rest","render","isAuthorized","to","privateRoutes","path","exact","publicRoutes","App","CssBaseline","map","route","key","Boolean","location","hostname","match","client","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","authTokens","get","token","localStorage","getItem","refreshToken","set","setItem","remove","removeItem","pasreQuery","qs","parse","search","arrayFormat","skipNull","parseNumbers","decode","exp","Date","now","err","sortByLastMessage","a","b","lastMessage","createdAt","diffTime","date","diff","moment","formatDate","format","renderDiffTimeLabel","renderTimeline","messages","timeline","length","forEach","idx","timeDiff","undefined","httpLink","HttpLink","uri","process","wsLink","WebSocketLink","options","reconnect","connectionParams","afterwareLink","ApolloLink","operation","forward","response","headers","getContext","authMiddleware","setContext","httpLinkWithMiddleware","onError","graphQLErrors","networkError","locations","extensions","log","includes","code","concat","link","split","query","definition","getMainDefinition","kind","ApolloClient","cache","InMemoryCache"],"mappings":"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","file":"static/js/main.42dac91d.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { grey as primary, blue as secondary } from \"@material-ui/core/colors\";\r\nimport { lighten, darken } from \"@material-ui/core/styles/colorManipulator\";\r\n// import defaultTheme from \"@material-ui/core/styles/defaultTheme\";\r\n\r\nconst preferColorSchema = window.matchMedia(\"(prefers-color-scheme: dark)\")\r\n  .matches;\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    type: preferColorSchema ? \"dark\" : \"light\",\r\n    primary,\r\n    secondary,\r\n  },\r\n  props: {\r\n    sidebar: 280,\r\n    sidebarMin: 150,\r\n    classes: {\r\n      ellipsis: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n        textOverflow: \"ellipsis\",\r\n      },\r\n    },\r\n  },\r\n  lighten,\r\n  darken,\r\n});\r\n\r\n// console.log(\"defaultTheme\", defaultTheme);\r\n// console.log(\"customTheme\", theme);\r\n\r\n// background:\r\n// theme.palette.type === \"dark\"\r\n//   ? theme.lighten(theme.palette.background.default, 0.235)\r\n//   : theme.darken(theme.palette.background.default, 0.057),\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\nimport Loadable from \"react-loadable\";\r\nimport { isAuthorized } from \"utils/index\";\r\n\r\nconst createLoadableComponent = (pathResolver) => {\r\n  return Loadable({\r\n    loader: pathResolver,\r\n    loading: (props) => {\r\n      if (props.error) console.error(props.error);\r\n      return null;\r\n    },\r\n  });\r\n};\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => {\r\n      return isAuthorized() ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nconst privateRoutes = [\r\n  {\r\n    path: \"/me\",\r\n    exact: false,\r\n    component: createLoadableComponent(() => import(\"./pages/Home\")),\r\n  },\r\n];\r\n\r\nconst publicRoutes = [\r\n  {\r\n    path: \"/(login|registration)\",\r\n    exact: true,\r\n    component: createLoadableComponent(() => import(\"./pages/Login\")),\r\n  },\r\n  {\r\n    path: \"/verify\",\r\n    exact: true,\r\n    component: createLoadableComponent(() => import(\"./pages/VerifyUser\")),\r\n  },\r\n];\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Router>\r\n        <Switch>\r\n          {privateRoutes.map((route) => (\r\n            <PrivateRoute key={route.path} {...route} />\r\n          ))}\r\n          {publicRoutes.map((route) => (\r\n            <Route key={route.path} {...route} />\r\n          ))}\r\n          <Route\r\n            path=\"*\"\r\n            render={() => <Redirect to={isAuthorized() ? \"/me\" : \"/login\"} />}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { client } from \"./client\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport { theme } from \"./theme\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nrender(\r\n  <ApolloProvider client={client}>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import qs from \"query-string\";\r\nimport moment from \"moment\";\r\nimport decode from \"jwt-decode\";\r\n\r\nexport const stringifyQuery = (location, modifiers = {}) => {\r\n  const settings = {\r\n    arrayFormat: \"comma\",\r\n    skipNull: true,\r\n    parseNumbers: true,\r\n  };\r\n\r\n  let query = {\r\n    ...qs.parse(location.search, settings),\r\n    ...modifiers,\r\n  };\r\n\r\n  return {\r\n    ...location,\r\n    search: qs.stringify(query, settings),\r\n  };\r\n};\r\n\r\nexport const authTokens = {\r\n  get: () => ({\r\n    token: localStorage.getItem(\"token\"),\r\n    refreshToken: localStorage.getItem(\"refreshToken\"),\r\n  }),\r\n  set: ({ token, refreshToken }) => {\r\n    localStorage.setItem(\"token\", token);\r\n    localStorage.setItem(\"refreshToken\", refreshToken);\r\n  },\r\n  remove: () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n  },\r\n};\r\n\r\nexport const pasreQuery = (location) => {\r\n  const settings = {\r\n    arrayFormat: \"comma\",\r\n    skipNull: true,\r\n    parseNumbers: true,\r\n  };\r\n  return qs.parse(location.search, settings);\r\n};\r\n\r\nexport const isAuthorized = () => {\r\n  const { token, refreshToken } = authTokens.get();\r\n\r\n  try {\r\n    decode(token);\r\n    const { exp } = decode(refreshToken);\r\n    if (Date.now() / 1000 > exp) {\r\n      return false;\r\n    }\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const sortByLastMessage = (a, b) => {\r\n  return b.lastMessage.createdAt - a.lastMessage.createdAt;\r\n};\r\n\r\nexport const diffTime = (date, diff = \"days\") => {\r\n  return moment().diff(+date, diff);\r\n};\r\n\r\nexport const formatDate = (date, format = \"HH:mm\") => {\r\n  if (date) {\r\n    return moment(+date).format(format);\r\n  }\r\n};\r\n\r\nexport const renderDiffTimeLabel = (date) => {\r\n  const timeDiff = diffTime(+date);\r\n\r\n  switch (timeDiff) {\r\n    case 0:\r\n      return \"Today\";\r\n    case 1:\r\n      return \"Yesterday\";\r\n    default:\r\n      return formatDate(date, \"MMMM D\");\r\n  }\r\n};\r\n\r\nexport const renderTimeline = (messages) => {\r\n  const timeline = {};\r\n\r\n  if (messages.length) {\r\n    messages.forEach(({ createdAt }, idx) => {\r\n      const timeDiff = diffTime(createdAt, \"days\");\r\n      if (timeline[timeDiff] === undefined) {\r\n        timeline[timeDiff] = idx;\r\n      }\r\n    });\r\n  }\r\n\r\n  return timeline;\r\n};\r\n","import { ApolloClient } from \"apollo-client\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloLink, split } from \"apollo-link\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { onError } from \"apollo-link-error\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport { authTokens } from \"utils/index\";\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: `${process.env.REACT_APP_API_URI}/graphql`,\r\n});\r\n\r\nexport const wsLink = new WebSocketLink({\r\n  uri: `${process.env.REACT_APP_SOCKET_URI}/graphql`,\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams: () => {\r\n      const { token, refreshToken } = authTokens.get();\r\n      // console.log(\"connectionParams token\", token);\r\n      // console.log(\"connectionParams refreshToken\", refreshToken);\r\n      return {\r\n        \"x-token\": token,\r\n        \"x-refresh-token\": refreshToken,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nconst afterwareLink = new ApolloLink((operation, forward) =>\r\n  forward(operation).map((response) => {\r\n    const context = operation.getContext();\r\n    const {\r\n      response: { headers },\r\n    } = context;\r\n    const token = headers.get(\"x-token\");\r\n    const refreshToken = headers.get(\"x-refresh-token\");\r\n    if (token && refreshToken) {\r\n      authTokens.set({ token, refreshToken });\r\n    }\r\n\r\n    return response;\r\n  })\r\n);\r\n\r\nconst authMiddleware = new ApolloLink((operation, forward) => {\r\n  operation.setContext(({ headers }) => {\r\n    const { token, refreshToken } = authTokens.get();\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        \"x-token\": token,\r\n        \"x-refresh-token\": refreshToken,\r\n      },\r\n    };\r\n  });\r\n\r\n  return forward(operation);\r\n});\r\n\r\nconst errorMiddleware = onError(({ graphQLErrors, networkError }) => {\r\n  if (graphQLErrors)\r\n    graphQLErrors.forEach(({ message, locations, path, extensions }) => {\r\n      console.log(\r\n        `[GraphQL error]: \r\n          Message: ${message}, \r\n          Location: ${locations}, \r\n          Path: ${path}`\r\n      );\r\n      if (\r\n        [\"UNAUTHENTICATED\", \"INTERNAL_SERVER_ERROR\"].includes(extensions.code) // \"INTERNAL_SERVER_ERROR\"\r\n      ) {\r\n        // authTokens.remove()\r\n      }\r\n    });\r\n\r\n  if (networkError) {\r\n    console.log(`[Network error]: ${networkError}`);\r\n  }\r\n});\r\n\r\nconst httpLinkWithMiddleware = errorMiddleware.concat(\r\n  afterwareLink.concat(authMiddleware.concat(httpLink))\r\n);\r\n\r\nconst link = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n    );\r\n  },\r\n  wsLink,\r\n  // errorMiddleware,\r\n  httpLinkWithMiddleware\r\n);\r\n\r\nexport const client = new ApolloClient({\r\n  link,\r\n  cache: new InMemoryCache(),\r\n});\r\n"],"sourceRoot":""}